name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # סודות אמיתיים:
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      REGION: ${{ secrets.GCP_REGION }}
      RUN_NUMBER: ${{ github.run_number }}

      # לא סודיים — תגדיר שם נקי לשירות ולריפו:
      SERVICE_NAME: wakesafe-api          # <— שים כאן שם חוקי (אותיות קטנות/ספרות/מקפים)
      SERVICE_DEPLOY: wakesafe-api        # אפשר לשנות לפי סביבה: wakesafe-api-dev/stage/prod
      IMAGE_REPO_NAME: wakesafe-api       # שם ה-image repo בלי דומיינים/אימיילים

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Google Auth (Service Account JSON)
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Validate & normalize names
        shell: bash
        run: |
          set -euo pipefail
          : "${PROJECT_ID:?PROJECT_ID is empty}"
          : "${SERVICE_NAME:?CLOUD_RUN_SERVICE is empty}"
          : "${REGION:?GCP_REGION is empty}"
          SERVICE_DEPLOY_RAW="${SERVICE_DEPLOY:-$SERVICE_NAME}"

          sanitize_service() {
            local out
            out="$(echo "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[ _]+/-/g; s/[^a-z0-9-]//g; s/-+/-/g; s/^-+//; s/-+$//')"
            if ! echo "$out" | grep -qE '^[a-z]'; then out="svc-$out"; fi
            echo "${out:0:63}"
          }

          sanitize_image_repo() {
            local out
            # לריפו של Docker: a-z0-9.- ומקפים; בלי דומיינים/אימיילים
            out="$(echo "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's|[ _/]+|-|g; s/[^a-z0-9.-]//g; s/-+/-/g; s/^-+//; s/-+$//')"
            echo "$out"
          }

          SERVICE_DEPLOY="$(sanitize_service "$SERVICE_DEPLOY_RAW")"
          IMAGE_REPO="$(sanitize_image_repo "${IMAGE_REPO_NAME:-$SERVICE_NAME}")"

          if ! echo "$SERVICE_DEPLOY" | grep -Eq '^[a-z]([-a-z0-9]*[a-z0-9])?$'; then
            echo "CLOUD_RUN_SERVICE invalid after normalization: '$SERVICE_DEPLOY'"
            exit 1
          fi
          if ! echo "$IMAGE_REPO" | grep -Eq '^[a-z0-9]+([-.][a-z0-9]+)*$'; then
            echo "Invalid Docker image repo after normalization: '$IMAGE_REPO'"
            exit 1
          fi

          echo "IMAGE_REPO=$IMAGE_REPO" >> "$GITHUB_ENV"
          echo "IMAGE_URI=gcr.io/$PROJECT_ID/$IMAGE_REPO:${RUN_NUMBER:-latest}" >> "$GITHUB_ENV"
          echo "IMAGE_URI_LATEST=gcr.io/$PROJECT_ID/$IMAGE_REPO:latest" >> "$GITHUB_ENV"
          echo "SERVICE_DEPLOY=$SERVICE_DEPLOY" >> "$GITHUB_ENV"

      - name: Sanity check gcloud
        run: |
          gcloud config set project "$PROJECT_ID"
          gcloud auth list
          gcloud config list
          gcloud auth print-access-token >/dev/null

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker gcr.io --quiet

      - name: Build Docker image
        run: |
          echo "Building image..."
          docker build -t "${IMAGE_URI}" .
          docker tag "${IMAGE_URI}" "${IMAGE_URI_LATEST}"

      - name: Push Docker image to GCR
        run: |
          docker push "${IMAGE_URI}"
          docker push "${IMAGE_URI_LATEST}"

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy "${SERVICE_DEPLOY}" \
            --image "${IMAGE_URI}" \
            --region "${REGION}" \
            --platform managed \
            --allow-unauthenticated \
            --port 8000 \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10 \
            --quiet
